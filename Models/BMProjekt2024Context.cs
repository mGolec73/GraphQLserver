// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GraphQLserver.Models;

public partial class BMProjekt2024Context : DbContext
{
    public BMProjekt2024Context(DbContextOptions<BMProjekt2024Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventSection> EventSections { get; set; }

    public virtual DbSet<LastExtracted> LastExtracteds { get; set; }

    public virtual DbSet<Section> Sections { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TicketPurchase> TicketPurchases { get; set; }

    public virtual DbSet<Venue> Venues { get; set; }

    public virtual DbSet<VenueType> VenueTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode).HasName("PK__Countrie__5D9B0D2D7ED3AE70");

            entity.HasIndex(e => new { e.CountryCode, e.Language }, "IX_Countries_Country_Language").IsUnique();

            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("en");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.CustomerId }).HasName("PK__Customer__A61D03BF56F34D62");

            entity.HasIndex(e => new { e.VenueId, e.Email }, "AK_Venue_Email").IsUnique();

            entity.Property(e => e.CustomerId).ValueGeneratedOnAdd();
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(30);
            entity.Property(e => e.PostalCode).HasMaxLength(20);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customers_Countries");

            entity.HasOne(d => d.Venue).WithMany(p => p.Customers)
                .HasForeignKey(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customers_Venues");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.EventId }).HasName("PK__Events__2BC3A9734E1361C3");

            entity.Property(e => e.EventId).ValueGeneratedOnAdd();
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.EventName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Subtitle).HasMaxLength(50);

            entity.HasOne(d => d.Venue).WithMany(p => p.Events)
                .HasForeignKey(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Events_Venues");
        });

        modelBuilder.Entity<EventSection>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.EventId, e.SectionId }).HasName("PK__EventSec__5843467B739222C2");

            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.RowVersion)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Event).WithMany(p => p.EventSections)
                .HasForeignKey(d => new { d.VenueId, d.EventId })
                .HasConstraintName("FK_EventSections_Events");

            entity.HasOne(d => d.Section).WithMany(p => p.EventSections)
                .HasForeignKey(d => new { d.VenueId, d.SectionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventSections_Sections");
        });

        modelBuilder.Entity<LastExtracted>(entity =>
        {
            entity.HasKey(e => e.Lock);

            entity.ToTable("LastExtracted");

            entity.Property(e => e.Lock)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("X")
                .IsFixedLength();
            entity.Property(e => e.LastExtractedEventRowVersion)
                .IsRequired()
                .HasMaxLength(8)
                .HasDefaultValueSql("(0x0000000000000000)");
            entity.Property(e => e.LastExtractedTicketRowVersion)
                .IsRequired()
                .HasMaxLength(8)
                .HasDefaultValueSql("(0x0000000000000000)");
            entity.Property(e => e.LastExtractedVenueRowVersion)
                .IsRequired()
                .HasMaxLength(8)
                .HasDefaultValueSql("(0x0000000000000000)");
        });

        modelBuilder.Entity<Section>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.SectionId }).HasName("PK__Sections__0459157593EE2C4E");

            entity.Property(e => e.SectionId).ValueGeneratedOnAdd();
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SeatRows).HasDefaultValue((short)20);
            entity.Property(e => e.SeatsPerRow).HasDefaultValue((short)30);
            entity.Property(e => e.SectionName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.StandardPrice)
                .HasDefaultValue(10m)
                .HasColumnType("money");

            entity.HasOne(d => d.Venue).WithMany(p => p.Sections)
                .HasForeignKey(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sections_Venues");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.TicketId }).HasName("PK__Tickets__5B45299237B875E3");

            entity.HasIndex(e => new { e.VenueId, e.EventId, e.SectionId, e.RowNumber, e.SeatNumber }, "AK_Venue_Event_Seat_Ticket").IsUnique();

            entity.Property(e => e.TicketId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.TicketPurchase).WithMany(p => p.Tickets)
                .HasForeignKey(d => new { d.VenueId, d.TicketPurchaseId })
                .HasConstraintName("FK_Tickets_TicketPurchases");

            entity.HasOne(d => d.EventSection).WithMany(p => p.Tickets)
                .HasForeignKey(d => new { d.VenueId, d.EventId, d.SectionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tickets_EventSections");
        });

        modelBuilder.Entity<TicketPurchase>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.TicketPurchaseId }).HasName("PK__TicketPu__4521662FF5F66724");

            entity.Property(e => e.TicketPurchaseId).ValueGeneratedOnAdd();
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseTotal).HasColumnType("money");
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.TicketPurchases)
                .HasForeignKey(d => new { d.VenueId, d.CustomerId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketPurchases_Customers");
        });

        modelBuilder.Entity<Venue>(entity =>
        {
            entity.Property(e => e.VenueId).ValueGeneratedNever();
            entity.Property(e => e.AdminEmail)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.AdminPassword).HasMaxLength(30);
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PostalCode).HasMaxLength(20);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.VenueName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VenueType)
                .IsRequired()
                .HasMaxLength(30);

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Venues)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Venues_Countries");

            entity.HasOne(d => d.VenueTypeNavigation).WithMany(p => p.Venues)
                .HasForeignKey(d => d.VenueType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Venues_VenueTypes");
        });

        modelBuilder.Entity<VenueType>(entity =>
        {
            entity.HasKey(e => e.VenueType1).HasName("PK__VenueTyp__265E44FD77014281");

            entity.HasIndex(e => new { e.VenueTypeName, e.Language }, "AK_VenueType_VenueTypeName_Language").IsUnique();

            entity.Property(e => e.VenueType1)
                .HasMaxLength(30)
                .HasColumnName("VenueType");
            entity.Property(e => e.EventTypeName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.EventTypeShortName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.EventTypeShortNamePlural)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.VenueTypeName)
                .IsRequired()
                .HasMaxLength(30);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}